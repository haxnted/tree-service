// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TreeService.Infrastructure.DbContexts;

#nullable disable

namespace TreeService.Infrastructure.Migrations
{
    [DbContext(typeof(TreeWriteDbContext))]
    [Migration("20241120205852_Tree_Initial")]
    partial class Tree_Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TreeService.Domain.Node", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("idx_parent_id");

                    b.ToTable("nodes", (string)null);
                });

            modelBuilder.Entity("TreeService.Domain.Node", b =>
                {
                    b.HasOne("TreeService.Domain.Node", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_nodes_nodes_parent_id");

                    b.OwnsOne("TreeService.Domain.ValueObjects.Description", "Description", b1 =>
                        {
                            b1.Property<Guid>("NodeId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(400)
                                .HasColumnType("character varying(400)")
                                .HasColumnName("description");

                            b1.HasKey("NodeId");

                            b1.ToTable("nodes");

                            b1.WithOwner()
                                .HasForeignKey("NodeId")
                                .HasConstraintName("fk_nodes_nodes_id");
                        });

                    b.OwnsOne("TreeService.Domain.ValueObjects.Title", "Title", b1 =>
                        {
                            b1.Property<Guid>("NodeId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("title");

                            b1.HasKey("NodeId");

                            b1.ToTable("nodes");

                            b1.WithOwner()
                                .HasForeignKey("NodeId")
                                .HasConstraintName("fk_nodes_nodes_id");
                        });

                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Title")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
